PEP: 444
Title: Python Web Server Gateway Interface v2.0
Version: $Revision: 84850 $
Last-Modified: $Date: 2010-09-16 12:13:52 -0400 (Thu, 16 Sep 2010) $
Author: Alice Bevan-McGregor <"alice@gothcandy.com":mailto:alice@gothcandy.com>
        Armin Ronacher <"armin.ronacher@active-4.com":mailto:armin.ronacher@active-4.com>
Discussions-To: Python Web-SIG <"web-sig@python.org":mailto:web-sig@python.org>
Status: Draft
Type: Informational
Content-Type: text/x-rst
Created: 19-Jul-2010


Abstract
========

This document specifies a proposed second-generation standard interface
between web servers and Python 2.6+ and 3.1+ applications.


Introduction
============

This protocol specification is influenced heavily by the Web Services
Gateway Interface (WSGI) 1.0 standard described in PEP 333 [1]_ , the
extensions proposed in PEP 3333[2], and community discussion. The
high-level rationale for having any standard that allows Python-based
web servers and applications to interoperate is outlined in PEP 333.
This document has been written to clarify potentially ambiguous language
from PEP 333, define Python 3.X compatibility, and update it with
improved methodologies.

Applications and servers which are written to this specification are
meant to work properly under Python versions greater than or equal to
2.6, less than 3.0, and greater than or equal to 3.1. Neither an
application nor a server that implements the WSGI 2 specification can be
easily written which will work under Python 2 versions earlier than 2.6
nor Python 3 versions earlier than 3.1.

.. note::

   Python 2.6 is the first Python version that supported an alias for
   ``bytes`` and the ``b"foo"`` literal syntax. Byte strings are an
   integral part of WSGI 2, thus Python 2.6 being the minimum version
   supported. While developers may attempt to provide solutions for
   earlier versions, such compatibility is not defined herein.


Rationale and Goals
===================

.. note::

   This section to be written.


Definitions
===========

The key words *must*, *must not*, *required*, *shall*, *shall not*,
*should*, *should not*, *recommended*, *may*, and *optional* in this
document are to be interpreted as described in RFC 2119 [3]_ .

This document utilizes several terms which need to be clearly defined:

*Byte string*
    The data format returned by socket read operations on a given
    implementation. In both Python 2.X and 3.X CPython implementations
    this is a literal *byte string*. For implementations that do not
    have the concept of a *byte string*, this is a ``ISO-8859-1``
    *unicode string* with allowable characters in the range ``\u0000````
    through ``\u00FF`` inclusive.

*Unicode string*
    A series of Unicode characters.

*Native string*
    The primary string type for a given Python implementation. For
    Python 2.X as implemented by CPython, this is a *byte string*. For
    Python 3.X, this is a *unicode string*.

*Application callable* or *application object*
    Interchangeable terms representing "a function, a method, or an
    instance with a ``__call__`` method".



Differences from PEP 3333 / WSGI 1.0.1
======================================

.. note::

   This section to be written.


Specification Overview
======================

WSGI defines a conversation held between two parties, optionally with
intermediaries that understand both sides of the conversation. This
conversation is between the "server" (or "gateway", hereafter referred
to simply as server) and the "application" (or "framework", hereafter
referred to simply as application) with "middleware" optionally between
them. A WSGI 2 server prepares an environment based on a request and
invokes a callable object (the application) using the API defined
herein; the result of the invocation is then used as the response sent
back to the client.

The specifics of how the application callable is provided to the server
is left as an implementation detail of the server and is outside the
scope of this document. It is assumed that some servers will require an
application deployer to write a short script to create an instance of
the server, and then supply it with the application object. Other
servers may use configuration files or other mechanisms to specify
where an application object should be imported from or otherwise
obtained.

In addition to "pure" servers and applications, it is also possible to
create "middleware" components that implement both sides of this
specification. Such components act as an application to their caller and
as a server to the wrapped application. These can be used to provide
extended APIs, content transformation, navigation, and other useful
functions. This is similar to the decorator functionality in Python,
though middleware must conform to the protocol defined in this document.

A third (optional) form of extension, filters, are described in this
document. Filters are similar to middleware, though instead of wrapping
an application in multiple layers (recursively descending from server
through to application and returning in the opposite direction) filters
provide a mechanism to alter the request environment before being passed
to the application/middleware stack and a mechanism for altering the
response returned by the application/middleware stack. Filters should
not be constructed that are co-dependant: if a filter needs to alter the
request _and_ response, it should be implemented as middleware.

It is up to the application implementor to choose the appropriate
implementation technique for their needs. Conversely, a server that is
invoking a callable must not have any dependency on what kind of
callable was provided to it. Application callables are only to be
called, not introspected.

.. note::

   Although we refer to it as an "application", this should not be
   construed to mean that application developers will use WSGI 2 as a
   web programming API. It is assumed that application developers will
   continue to use existing, high-level framework services to develop
   their applications. WSGI 2 is a tool for framework and server
   developers, and is not intended to directly support application
   developers.


Application / Framework API
===========================

An application is any function, method, or instance with a ``__call__``
method. Applications must:

1. Be able to be invoked more than once. If this can not be guaranteed
   by the application implementation, it must be wrapped in a function
   that creates a new instance on each call.

2. Accept a single positional argument which must be an instance of a
   base Python dictionary containing what is referred to as the WSGI
   environment. The contents of this dictionary are fully described in
   the WSGI Environment section.

3. Return a 3-tuple of ``(status, headers, body)`` where:

   a. ``status`` must contain the HTTP status code and reason phrase of
      the response. The status code and reason must be present, in that
      order, separated by a single space. (See RFC 2616, Section 6.1.1
      for more information.)

   b. ``headers`` must be a standard Python list containing 2-tuples
      of ``(name, value)`` pairs representing the HTTP headers of the
      response. Each header name must represent a valid HTTP header
      field name (as defined by RFC 2616, Section 4.2) without
      trailing colon or other punctuation.

   c. ``body`` must be an iterable representing the HTTP response
      body.

   d. ``status`` and the name of each header present in ``headers``
      must not have leading or trailing whitespace.

   e. ``status``, and the contents of ``headers`` (both name and
      value) must not contain control characters including carriage
      returns or linefeeds.

   f. ``status``, ``headers``, and the chunks yielded by the ``body``
      iterator should be returned as byte strings, though for
      implementations where native strings are unicode, native strings
      may be returned. The server must encode unicode values using
      ``ISO-8859-1``.

   g. The amount of data yielded by the body iterable must not exceed
      the length specified by the ``Content-Length`` response header,
      if defined.

   h. The ``body`` iterable *may* be a native string, instead of a
      native string wrapped in a list for the simple case, but this is
      *not recommended*.

Additionally, applications and middleware must not alter HTTP 1.1
"hop-by-hop" features or headers, any equivalent features in HTTP 1.0,
or any headers that would affect the persistence of the client's
connection to the web server. Applications and middleware may, however,
interrogate the environment for their presence and value. These features
are the exclusive province of the server, and a server should consider
it a fatal error for an application to attempt sending them, and raise
an error if they are supplied as return values from an application in
the headers structure.


Server / Gateway API
====================

A WSGI 2 server must:

1. Invoke the application callable once for each request it receives
   from an HTTP client that is directed at the application.

2. Pass a single positional value to the application callable
   representing the request environment, described in detail in the WSGI
   Environment section.

3. Ensure that correct response headers are sent to the client. If the
   application omits a header required by the HTTP standard (or other
   relevant specifications that are in effect), the server must add it.
   E.g. the ``Date`` and ``Server`` headers.

   a. The server must not override values with the same name if they
      are emitted by the application.

4. Raise an exception if the application attempts to set HTTP 1.1
   "hop-by-hop" or persistence headers, or equivalent headers in HTTP
   1.0, as described above.

5. Encode unicode data (where returned by the application) using
   ``ISO-8859-1``.

6. Ensure that line endings within the body are not altered.

7. Transmit body chunks to the client in an unbuffered fashion,
   completing the transmission of each set of bytes before requesting
   another one. (Applications should perform their own buffering.)

8. Call the ``close()`` method of the body returned by the application,
   if present, upon completion of the current request. This should be
   called regardless of the termination status of the request. This is
   to support resource release by the application and is intended to
   complement PEP 325's generator support, and other common iterables
   with close() methods.

9. Support the HTTP 1.1 specification where such support is made
   possible by the underlying transport channel, including full URL
   ``REQUEST_URI``, pipelining of requests, chunked transfer, and any
   other HTTP 1.1 features mandated in the relevant RFC.

Additionally,

1. HTTP header names are case-insensitive, so be sure to take that into
   consideration when examining application-supplied headers.

2. The server may apply HTTP transfer encodings or perform other
   transformations for the purpose of implementing HTTP features such as
   chunked transfer.

3. The server must not attempt to handle byte range requests; the
   application can optimize this use case far more easily than a server.
   (For example an application can generate the correct body length vs.
   generating the whole body and having the server buffer and slice it.)

4. Servers must not directly use any other attributes of the body
   iterable returned by the application.


Server Extension APIs
---------------------

Some server authors may wish to expose more advanced APIs that
application authors can use for specialized purposes. For example, a
server based on mod_python might wish to expose part of the Apache API
as a WSGI 2 extension.

In the simplest case, this requires nothing more than defining a key in
the request environment, such as ``mod_python.some_api``. But, in many
cases, the possible presence of middleware can make this difficult. For
example, an API that offers access to the same HTTP headers that are
found in environment variables might return different data if the
environment has been modified by middleware.

In general, any extension API that duplicates, supplants, or bypasses
some portion of WSGI 2 functionality runs the risk of being incompatible
with middleware components. Server developers should not assume that
nobody will use middleware, because many framework developers
specifically organize their frameworks to function almost entirely as
middleware of various kinds.

So, to provide maximum compatibility, servers that provide extension
APIs that replace some WSGI 2 functionality must design those APIs so
that they are invoked using the portion of the API that they replace.
For example, an extension API to access HTTP request headers must
require the application to pass in its current environment, so that the
server may verify that HTTP headers accessible via the API have not been
altered by middleware. If the extension API cannot guarantee that it
will always agree with the environment about the contents of HTTP
headers, it must refuse service to the application, e.g. by raising an
error, returning ``None`` instead of a header collection, or whatever is
appropriate to the API.

These guidelines also apply to middleware that adds information such as
parsed cookies, form variables, sessions, and the like to the
environment. Specifically, such middleware should provide these features
as functions which operate on the environment, rather than simply
stuffing values into the environment. This helps ensure that information
is calculated from the environment after any middleware has done any URL
rewrites or other modifications.

It is very important that these "safe extension" rules be followed by
both server and middleware developers, in order to avoid a future in
which middleware developers are forced to delete any and all extension
APIs from the environment to ensure that their mediation isn't being
bypassed by applications using those extensions!


Middleware API
==============

Middleware plays the role of a server with respect to the application
they wrap, while also acting as an application with respect to the
server they are called by. Middleware components can perform such
functions as:

* Routing a request to different application objects based on the target
  URL, after rewriting the environment accordingly.

* Allowing multiple applications to run side-by-side in the same
  process.

* Load balancing and remote processing by forwarding requests and
  responses over a network.

The presence of middleware in general is transparent to both the server
and the application sides of the interface, and must require no special
support. A developer who desires to incorporate middleware into an
application simply provides the middleware component to the server, as
if it were an application, and configures the middleware component to
invoke the application, as if the middleware component were a server. Of
course, the "application" that the middleware wraps may in fact be
another middleware component wrapping another application, and so on,
creating what is referred to as a "middleware stack".

.. note::

   Care must be taken when modifying the returned body. If the amount
   of data returned will differ and a ``Content-Length`` header is
   present, it must be updated to reflect the true length of the body
   returned by the middleware.


Filter API
==========

.. note::

   There is strong contention on the mailing list whether this should
   be included in the PEP.

A large amount of middleware only applies changes to the environment
coming in from the server before reaching the application, or,
conversely, only applies transformations to the data returned by the
application. Additionally, middleware, by wrapping applications and
other middleware in a recursive structure, is less efficient and harder
to debug than a "flat" model. Filters fill the need for efficient
ingress- or egress-only modifications.

"Filters" can perform such functions as:

* Perform additional processing on the incoming request, such as
  transforming HTTP GET arguments.

* Perform content post-processing, such as applying XSL stylesheets or
  GZip compression.

* Calculate and add optional HTTP headers such as ``Content-MD5``.

The filtering API may be implemented by WSGI 2 servers, and filtering
functionality can be added to non-supporting servers by utilizing a
middleware layer which implements the filtering API.


Ingress Filters
---------------

Ingress filters are called before the application (and middleware
stack), may modify the request environment, and must:

1. Accept a single positional argument representing the WSGI
   environment.

2. Return ``None``.


Egress Filters
--------------

Egress filters are called after the application (and middleware stack)
only if an unhandled exception has not been raised, may modify the
response, and must:

1. Accept four positional arguments: ``environ``, ``status``,
   ``headers``, and ``body``, where ``environ`` is the request
   environment and ``status``, ``headers``, and ``body`` are the values
   returned by the application.

2. Return a 3-tuple of (``status``, ``headers``, and ``body``) with the
   same restrictions as an application.

There is no requirement for egress filters to return the same objects as
those passed in.

.. note::

   As per middleware, care must be taken when modifying the returned
   body.


Asynchronous Processing
=======================

.. note::

   This section to be written.


Implementation Details
======================

The WSGI Environment
--------------------

1. All keys in the environment dictionary must be native strings.

2. The value matching the ``'wsgi.url_scheme'`` key must be a native
   string.

3. For implementations where the native string is unicode, all CGI keys,
   and all CGI values other than ``REQUEST_URI``, ``SCRIPT_NAME``,
   ``PATH_INFO``, ``PARAMETERS``, and ``QUERY_STRING``, must be encoded
   using ``ISO-8859-1``.

4. The value for the ``REQUEST_URI`` key must be a byte string.

5. The values for the ``SCRIPT_NAME``, ``PATH_INFO``, ``PARAMETERS``,
   and ``QUERY_STRING`` keys must be unicode strings. The encoding used
   must be stored in ``wsgi.uri_encoding`` and default to ``UTF-8``. The
   application developer may provide a different default. If conversion
   failed, ``ISO-8859-1`` must be used.

6. The values for ``SCRIPT_NAME`` and ``PATH_INFO`` must be URL-decoded.

7. The value for the ``wsgi.uri_encoding`` key must be a native string.

8. The value matching the ``wsgi.input`` key must produce byte strings.

9. The ``read()`` and ``readline()`` methods of ``wsgi.input`` may
   optionally take a size hint. If no hint is given ``read()`` reads
   until end of stream.

10. Read operations across ``wsgi.input`` must return an empty string as
    an end of stream marker.

The following CGI variables must be present.

+---------------------+-----------------------------------------------+
| Key                 | Description                                   |
+=====================+===============================================+
| ``REQUEST_METHOD``  | The HTTP request method, such as "GET" or     |
|                     | "POST".                                       |
+---------------------+-----------------------------------------------+
| ``SCRIPT_NAME``     | The initial portion of the request URL's      |
|                     | "path" that corresponds to the application    |
|                     | object, so that the application knows its     |
|                     | virtual "location". This may be an empty      |
|                     | string if the application corresponds to the  |
|                     | "root" of the server.                         |
+---------------------+-----------------------------------------------+
| ``PATH_INFO``       | The remainder of the request URL's "path",    |
|                     | designating the virtual "location" of the     |
|                     | request's target within the application.      |
+---------------------+-----------------------------------------------+
| ``QUERY_STRING``    | The portion of the request URL that follows   |
|                     | the ``"?"``, if any, or an empty string.      |
+---------------------+-----------------------------------------------+
| ``PARAMETERS``      | The portion of the request URL that follows   |
|                     | the ``";"``, if any, or an empty string.      |
+---------------------+-----------------------------------------------+
| ``SERVER_NAME``     | When combined with ``SCRIPT_NAME`` and        |
| ``SERVER_PORT``     | ``PATH_INFO`` these variables can be used to  |
|                     | complete the URL. Note, however, that         |
|                     | ``HTTP_HOST``, if present, should be used in  |
|                     | preference to ``SERVER_NAME`` for             |
|                     | reconstructing the request URL. See the URL   |
|                     | Reconstruction section below for more detail. |
+---------------------+-----------------------------------------------+
| ``SERVER_PROTOCOL`` | The version of the protocol the client used   |
|                     | to send the request. Typically this will be   |
|                     | something like ``"HTTP/1.0"`` or              |
|                     | ``"HTTP/1.1"`` and may be used by the         |
|                     | application to determine how to treat any     |
|                     | HTTP request headers.                         |
+---------------------+-----------------------------------------------+

The following CGI values may present be in the environment.

+---------------------+-----------------------------------------------+
| Key                 | Description                                   |
+=====================+===============================================+
| ``CONTENT_TYPE``    | The contents of the ``Content-Type`` header   |
|                     | in the HTTP request.                          |
+---------------------+-----------------------------------------------+
| ``CONTENT_LENGTH``  | The contents of the ``Content-Length`` header |
|                     | in the HTTP request.                          |
+---------------------+-----------------------------------------------+
| ``HTTP_*``          | Variables corresponding to the                |
|                     | client-supplied HTTP request headers. The     |
|                     | presence or absence of these variables should |
|                     | correspond with the presence or absence of    |
|                     | the appropriate HTTP header in the request.   |
+---------------------+-----------------------------------------------+

A server should attempt to provide as many other CGI variables as are
applicable. In addition, if SSL is in use, the server should also
provide as many of the SSL environment variables [5] as are applicable,
such as ``HTTPS=on`` and ``SSL_PROTOCOL``. Note, however, that an
application that uses any CGI variables other than the ones listed above
are necessarily non-portable to web servers that do not support the
relevant extensions. (For example, web servers that do not publish files
will not be able to provide a meaningful ``DOCUMENT_ROOT`` or
``PATH_TRANSLATED``.)

A WSGI 2 compliant server should document the variables it provides,
along with their definitions, as appropriate. Applications must check
for the presence of any server-specific variables they require, and have
a fallback plan in the event such a variable is absent.

In addition to the CGI-defined variables, the environment dictionary may
also contain arbitrary operating-system "environment variables", and
must contain the following WSGI 2 defined variables:

+-----------------------+-----------------------------------------------+
| Key                   | Description                                   |
+=======================+===============================================+
| ``wsgi.version``      | The tuple ``(2, 0)``, representing WSGI       |
|                       | version 2.0.                                  |
+-----------------------+-----------------------------------------------+
| ``wsgi.url_scheme``   | A value representing the "scheme" portion of  |
|                       | the URL at which the application is being     |
|                       | invoked. Normally, this will have the value   |
|                       | ``"http"`` or ``"https"``, as appropriate.    |
+-----------------------+-----------------------------------------------+
| ``wsgi.input``        | An input stream (file-like object) from which |
|                       | bytes constituting the HTTP request body can  |
|                       | be read.                                      |
+-----------------------+-----------------------------------------------+
| ``wsgi.errors``       | An output stream (file-like object) to which  |
|                       | error output text can be written for the      |
|                       | purpose of recording program or other errors  |
|                       | in a standardized and possibly centralized    |
|                       | location.                                     |
+-----------------------+-----------------------------------------------+
| ``wsgi.multithread``  | This value must evaluate true if the          |
|                       | application object may be simultaneously      |
|                       | invoked by another thread in the same         |
|                       | process, and should evaluate false otherwise. |
+-----------------------+-----------------------------------------------+
| ``wsgi.multiprocess`` | This value must evaluate true if an           |
|                       | equivalent application object may be          |
|                       | simultaneously invoked by another process,    |
|                       | and should evaluate false otherwise.          |
+-----------------------+-----------------------------------------------+
| ``wsgi.run_once``     | This value must evaluate true if the server   |
|                       | or gateway expects (but does not guarantee)   |
|                       | that the application will only be invoked     |
|                       | this one time during the life of its          |
|                       | containing process. Normally, this will only  |
|                       | be true for a gateway based on CGI (or        |
|                       | similar).                                     |
+-----------------------+-----------------------------------------------+
| ``wsgi.async``        | This value must evaluate to true if the       |
|                       | server is capable of handling asynchronous    |
|                       | processing tokens as defined in the           |
|                       | Asynchronous Processing chapter.              |
+-----------------------+-----------------------------------------------+

The following environment variables may be present if supported by the
server:

+----------------------+-----------------------------------------------+
| Key                  | Description                                   |
+======================+===============================================+
| ``wsgi.script_name`` | The non-URL-decoded SCRIPT_NAME value. This   |
|                      | is the original URL-encoded value derived     |
|                      | from the request URI.                         |
+----------------------+-----------------------------------------------+
| ``web3.path_info``   | The non-URL-decoded PATH_INFO value. This is  |
|                      | the original URL-encoded value derived from   |
|                      | the request URI.                              |
+----------------------+-----------------------------------------------+

.. note::

   Through a historical inequity, by virtue of the CGI specification,
   ``SCRIPT_NAME`` and ``PATH_INFO`` are present within the environment
   as an already URL-decoded string.

Finally, the environment dictionary may also contain server-defined
variables. These variables must have names which are composed of only
lower-case letters, numbers, dots, and underscores, and should be
prefixed with a name that is unique to the defining server or gateway.
For example, ``mod_wsgi`` might define variables with names like
``mod_wsgi.some_variable``.


Input Stream
------------

The input stream (``wsgi.input``) provided by the server must support
the following methods:

+-----------------------+---------+
| Method                | Notes   |
+-----------------------+---------+
| ``read(size)``        | 1, 4    |
| ``readline([size])``  | 1, 2, 4 |
| ``readlines([size])`` | 1, 3, 5 |
| ``__iter__()``        | 1, 6    |
+-----------------------+---------+

The semantics of each method are as documented in the Python Library
Reference, except for these notes as listed in the table above:

1. The server must honor the client's specified ``Content-Length``, if
   present, and must:

   a. Truncate read requests that would exceed the request body length.

   b. After consuming the request body, simulate an end-of-file
      condition (by returning an empty string) if the application
      attempts further reads.

2. The implementation must support the optional size argument to
   ``readline()``.

3. The application is free to not supply a size argument to
   ``readlines()``, and the server or gateway is free to ignore the
   value of any supplied size argument.

4. The ``read``, ``readline`` and ``__iter__`` methods must return a
   bytes instance.

5. The ``readlines()`` method must return a sequence which contains
   instances of bytes.

6. The ``__iter__`` method must return an iterator yielding instances
   of bytes.

The methods listed in the table above must be supported by all servers
conforming to this specification. Applications conforming to this
specification must not use any other methods or attributes of the input
object. In particular, applications must not attempt to close this
stream, even if it possesses a close() method.


Error Stream
------------

This should be a "text mode" stream; i.e., applications should use
``"\n"`` as a line ending, and assume that it will be converted to the
correct line ending by the server.

For many servers, ``wsgi.errors`` will be the server's main error log.
Alternatively, this may be ``sys.stderr``, or a log file of some sort.
The server's documentation should include an explanation of how to
configure this or where to find the recorded output. A server may supply
different error streams to different applications, if this is desired.

*Note:* It is highly recommended for servers to implement
``wsgi.errors`` as a wrapper around the standard Python logging module
using the ``wsgi.errors`` handler name. This will allow for maximum
configurability using standard Python interfaces versus server-specific
configuration directives. In addition, there are many different ways to
route the Python logging module, including STDERR, on-disk log file,
over the network, and via e-mail or instant messenger.

The error stream (``wsgi.errors``) provided by the server must support
the following methods:

+---------------------+-------+
| Method              | Notes |
+=====================+=======+
| ``flush()``         | 1     |
+---------------------+-------+
| ``write(str)``      | 2     |
+---------------------+-------+
| ``writelines(seq)`` | 2     |
+---------------------+-------+

The semantics of each method are as documented in the Python Library
Reference, except for these notes as listed in the table above:

1. Since the errors stream may not be rewound, servers and gateways are
   free to forward write operations immediately, without buffering. In
   this case, the ``flush()`` method may be a no-op. Portable
   applications, however, cannot assume that output is unbuffered or
   that ``flush()`` is a no-op. They must call ``flush()`` if they need
   to ensure that output has in fact been written. (For example, to
   minimize intermingling of data from multiple processes writing to the
   same error log.)

2. The ``write()`` method must accept a native string argument.

3. The ``writelines()`` method must accept a sequence argument that
   consists entirely of native strings.

The methods listed in the table above must be supported by all servers
conforming to this specification. Applications conforming to this
specification must not use any other methods or attributes of the
``wsgi.errors`` object. In particular, applications must not attempt to
close this stream, even if it possesses a close() method.


HTTP Features
-------------

Servers should:

* Be conservative in their implementation and generally allow
  applications complete control over their output.

* Only make changes that do not alter the effective semantics of the
  application's response.

In a sense, a server should consider itself to be like an HTTP "gateway
server", with the application being an HTTP "origin server". (See RFC
2616, section 1.3, for the definition of these terms.)

However, because WSGI 2 servers and applications do not communicate via
HTTP, what RFC 2616 calls "hop-by-hop" headers do not apply to WSGI 2
internal communications.

Applications must not:

1. Generate any "hop-by-hop" headers[4].

2. Attempt to use HTTP features that would require them to generate such
   headers.

3. Rely on the content of any incoming "hop-by-hop" headers in the
   environment dictionary.

4. Apply a transport encoding to its response body.

Servers must:

1. Handle any supported inbound "hop-by-hop" headers on their own.

2. Provide transparent support for HTTP 1.1 Expect/Continue. This can be
   accomplished in one of two ways:

   a. Respond to requests containing an ``"Expect: 100-continue"``
      request with an immediate ``"100 Continue"`` response, and proceed
      normally.

   b. Proceed with the request normally, but provide the application
      with a ``wsgi.input`` stream that will send the ``"100 Continue"``
      response if/when the application first attempts to read from the
      input stream. The read request must then remain blocked until the
      client responds.

3. Provide transparent support for chunked transfer encoding of request
   bodies.

4. Provide transparent support for chunked transfer encoding of response
   bodies if:

   a. The ``Content-Length`` header is missing from the response, or;

   b. The ``Transfer-Encoding`` response header is set to ``"chunked"``,
      even if a ``Content-Length`` header is provided.

Note that these behavior restrictions do not apply for HTTP 1.0 requests
or for requests that are not directed to an application object. Not
defining a ``Content-Length`` for responses to HTTP 1.0 requests must
still be treated as an error condition by the server, for example.

For more information on HTTP 1.1 Expect/Continue, see RFC 2616, sections
8.2.3 and 10.1.1. For more information on chunked transfer encoding, see
RFC 2616, section 3.6.1.

Servers must not, and applications should:

1. Handle cache validation via the ``If-None-Match`` and
   ``If-Modified-Since`` request headers and the ``Last-Modified`` and
   ``ETag`` response headers.

2. Handle byte range transmission of the application's response.

Similarly, a server may re-encode or transport-encode an application's
response, but the application should use a suitable content encoding on
its own.

Note that these restrictions on applications do not necessarily mean
that every application must re-implement every HTTP feature; many HTTP
features can be partially or fully implemented by middleware or filter
components, thus freeing both server and application authors from
implementing the same features over and over again.



Python Cross-Version Compatibility
==================================

.. note::

   TBD


Rationale
=========

.. note::

   TBD



Examples
========

Functional Application Example
------------------------------

The following is a simple, function-based "hello world" example
application, compatible with Python 2.x and 3.x.

::

    def hello(environ):
        status = "200 OK"
        body = "Hello world!"
        
        headers = [
                ("Content-Type", "text/plain"),
                ("Content-Length", str(len(body)))
            ]
        
        return status, headers, [body]


Class Instance Application Example
----------------------------------

The following is a simple, class-based "hello world" example
application, compatible with Python 2.x and 3.x.

::

    class Hello(object):
        def __call__(self, environ):
            status = "200 OK"
            body = "Hello world!"
            
            headers = [
                    ("Content-Type", "text/plain"),
                    ("Content-Length", str(len(body)))
                ]
            
            return status, headers, [body]
    
    hello = Hello()


Middleware Example
------------------

.. note::

   TBD: Demonstrate simple (and robust) benchmarking middleware.


Filtering Middleware Example
----------------------------

.. note::

   TBD: Demonstrate the filtering API as middleware.


CGI Server Example
------------------

.. note::

   TBD: Demonstrate a basic CGI server that conforms to this standard.


References
==========

.. note::

   Draft: Needs more references, esp. to community discussion.

.. [1] PEP 333: Python Web Services Gateway Interface v1.0
   (http://www.python.org/dev/peps/pep-0333/)

.. [2] PEP 3333: Python Web Services Gateway Interface v1.0.1
   (http://www.python.org/dev/peps/pep-3333/)

.. [3] RFC 2119: Key words for use in RFCs to Indicate Requirement Levels
   (http://www.rfc-editor.org/rfc/rfc2119.txt)

.. [4] "End-to-end and Hop-by-hop Headers" -- HTTP/1.1, Section 13.5.1
   (http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.5.1)


Copyright
=========

This document has been placed in the public domain.




..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 72
   coding: utf-8
   End:
