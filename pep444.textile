|_>. PEP | 444 |
|_>. Title | Python Web Server Gateway Interface v2.0 |
|_/3^>. Authors | Alice Bevan-McGregor <"alice@gothcandy.com":mailto:alice@gothcandy.com> |
| Chris McDonough <"chrism@plope.com":mailto:chrism@plope.com> |
| Armin Ronacher <"armin.ronacher@active-4.com":mailto:armin.ronacher@active-4.com> |
|_>. Discussions-To | Python Web-SIG <"web-sig@python.org":mailto:web-sig@python.org> |
|_>. Status | Draft |
|_>. Type | Informational |
|_>. Content-Type | text/x-textile |
|_>. Created | 19-Jul-2010 |
|_>. Last-Modified | 15-Dec-2010 |


h1. Abstract

This document specifies a proposed second-generation standard interface between web servers and Python 2.6+ and 3.1+ applications.


h1. Introduction

This protocol specification is influenced heavily by the Web Services Gateway Interface (WSGI) 1.0 standard described in PEP 333[1], the extensions proposed in PEP 3333[2], and community discussion. The high-level rationale for having any standard that allows Python-based web servers and applications to interoperate is outlined in PEP 333. This document has been written to clarify potentially ambiguous language from PEP 333, define Python 3.X compatibility, and update it with improved methodologies.

Applications and servers which are written to this specification are meant to work properly under Python versions greater than or equal to 2.6, less than 3.0, and greater than or equal to 3.1. Neither an application nor a server that implements the WSGI2 specification can be easily written which will work under Python 2 versions earlier than 2.6 nor Python 3 versions earlier than 3.1.

*Note:* Python 2.6 is the first Python version that supported an alias for @bytes@ and the @b"foo"@ literal syntax. This is why it is the minimum version supported by WSGI2. While developers may attempt to provide solutions for earlier versions, such compatibility is not defined herein.



h1. Definitions

The key words *must*, *must not*, *required*, *shall*, *shall not*, *should*, *should not*, *recommended*, *may*, and *optional* in this document are to be interpreted as described in RFC 2119[3].

This document utilizes several terms which need to be clearly defined:

<!-- TODO: ReST definition list. -->

# *Byte string:* The data format returned by socket read operations on a given implementation. In both Python 2.X and 3.X CPython implementations this is a literal _byte string_. For implementations that do not have the concept of a _byte string_, this is a @ISO-8859-1@ _unicode string_ with allowable characters in the range @\u0000@ through @\u00FF@ inclusive.
# *Unicode string:* A series of Unicode characters.
# *Native string:* The primary string type for a given implementation. For Python 2.X as implemented by CPython, this is a _byte string_. For Python 3.X, this is a _unicode string_.



h1. Specification Overview

WSGI defines a conversation held between two parties, optionally with intermediaries that understand both sides of the conversation. This conversation is between the "server" (or "gateway", hereafter referred to simply as server) and the "application" (or "framework", hereafter referred to simply as application) with "middleware" between them. A WSGI2 server prepares an environment based on a request and invokes a callable object (the application) using the API defined herein; the result of the invocation is then used as the response sent back to the client.

The specifics of how the application callable is provided to the server is left as an implementation detail of the server and is outside the scope of this document. It is assumed that some servers will require an application deployer to write a short script to create an instance of the server, and then supply it with the application object. Other servers may use configuration files or other mechanisms to specify where an application object should be imported from or otherwise obtained.

In addition to "pure" servers and applications, it is also possible to create "middleware" components that implement both sides of this specification. Such components act as an application to their caller, as a server to the wrapped application. These can be used to provide extended APIs, content transformation, navigation, and other useful functions. This is similar to the decorator functionality in Python, though middleware must conform to the protocol defined in this document.

A third form of extension, filters, are described in this document. "Filters" are similar to middleware, though instead of wrapping an application in multiple layers, recursively descending from server through to application and returning in the opposite direction, filters provide a mechanism to alter the request environment before being passed to the application/middleware stack, and a mechanism for altering the response returned by the application/middleware stack. Filters should not be constructed that are co-dependant: if a filter needs to alter the request _and_ response, it should be implemented as middleware. Filter support is optional at the server level.

Throughout this specification, we will use the terms "application callable" and "application object" to mean "a function, a method, or an instance with a @__call__@ method". It is up to the application implementor to choose the appropriate implementation technique for their needs. Conversely, a server that is invoking a callable must not have any dependency on what kind of callable was provided to it. Application callables are only to be called, not introspected.


h2. Application / Framework API

bq. *Status:* Final draft.

An application is any function, method, or instance with a @__call__@ method. Applications must be able to be invoked more than once, as virtually all servers (other than CGI) will make such repeated requests. If this cannot be guaranteed by the implementation of the actual application, it has to be wrapped in a function that creates a new instance on each call.

*Note:* Although we refer to it as an "application", this should not be construed to mean that application developers will use WSGI2 as a web programming API. It is assumed that application developers will continue to use existing, high-level framework services to develop their applications. WSGI2 is a tool for framework and server developers, and is not intended to directly support application developers.

A WSGI2 application must accept a single positional argument which must be an instance of a base Python dictionary containing what is referred to as the WSGI environment. The contents of this dictionary are fully described in the "WSGI Environment":#wsgi-environment section.

The return value of the application must be a 3-tuple of @(status, headers, body)@ where:

# @status@ must contain the HTTP status code and reason phrase of the response. The status code and reason must be present, in that order, separated by a single space. (See RFC 2616, Section 6.1.1 for more information.)
# @headers@ must be a standard Python list containing 2-tuples of @(name, value)@ pairs representing the HTTP headers of the response. Each header name must represent a valid HTTP header field name (as defined by RFC 2616, Section 4.2) without trailing colon or other punctuation.
# @body@ must be an iterable representing the HTTP response body.
# @status@ and the name of each header present in @headers@ must not have leading or trailing whitespace.
# @status@, and the contents of @headers@ (both name and value) must not contain control characters including carriage returns or linefeeds.
# @status@, @headers@, and the chunks yielded by the @body@ iterator should be returned as byte strings, though for implementations where native strings are unicode, native strings may be returned. The server must encode unicode values using ISO-8859-1.
# The amount of data yielded by the body iterable must not exceed the length specified by the @Content-Length@ response header, if defined.
# The @body@ iterable *may* be a native string, instead of a native string wrapped in a list for the simple case, but this is *not recommended*.

Applications and middleware must not alter HTTP/1.1 "hop-by-hop" features or headers, any equivalent features in HTTP/1.0, or any headers that would affect the persistence of the client's connection to the web server. Applications and middleware may interrogate the environment for their presence and value. These features are the exclusive province of the actual web server, and a server should consider it a fatal error for an application to attempt sending them, and raise an error if they are supplied as return values from an application in the headers structure. (For more specifics on "hop-by-hop" features and headers, please see the Other HTTP Features section below.)


h2. Server / Gateway API

bq. *Status:* Final draft.

A WSGI server must:

# Invoke the application callable once for each request it receives from an HTTP client that is directed at the application.
# Pass a single positional value to the application callable representing the request environment, described in detail in the "WSGI Environment":#wsgi-environment section.
# Ensure that correct response headers are sent to the client. If the application omits a header required by the HTTP standard (or other relevant specifications that are in effect), the server must add it. E.g. the @Date@ and @Server@ headers.
## The server must not override values with the same name if they are emitted by the application.
# Encode unicode data (where returned by the application) using @ISO-8859-1@.
# Ensure that line endings within the body are not altered.
# Transmit body chunks to the client in an unbuffered fashion, completing the transmission of each set of bytes before requesting another one. (Applications should perform their own buffering.)
# Call the @close()@ method of the body returned by the application, if present, upon completion of the current request. This should be called regardless of the termination status of the request. This is to support resource release by the application and is intended to complement PEP 325's generator support, and other common iterables with close() methods.

Additionally,

# HTTP header names are case-insensitive, so be sure to take that into consideration when examining application-supplied headers.
# The server may apply HTTP transfer encodings or perform other transformations for the purpose of implementing HTTP features such as byte-range transmission or chunked transfer.
# Servers must not directly use any other attributes of the body iterable returned by the application.


h3. Server Extension APIs

bq. *Status:* Final draft.

Some server authors may wish to expose more advanced APIs that application authors can use for specialized purposes. For example, a server based on mod_python might wish to expose part of the Apache API as a WSGI2 extension.

In the simplest case, this requires nothing more than defining an environ variable, such as @mod_python.some_api@. But, in many cases, the possible presence of middleware can make this difficult. For example, an API that offers access to the same HTTP headers that are found in environ variables might return different data if environ has been modified by middleware.

In general, any extension API that duplicates, supplants, or bypasses some portion of WSGI2 functionality runs the risk of being incompatible with middleware components. Server developers should not assume that nobody will use middleware, because some framework developers specifically organize their frameworks to function almost entirely as middleware of various kinds.

So, to provide maximum compatibility, servers that provide extension APIs that replace some WSGI2 functionality, must design those APIs so that they are invoked using the portion of the API that they replace. For example, an extension API to access HTTP request headers must require the application to pass in its current environ, so that the server may verify that HTTP headers accessible via the API have not been altered by middleware. If the extension API cannot guarantee that it will always agree with environ about the contents of HTTP headers, it must refuse service to the application, e.g. by raising an error, returning None instead of a header collection, or whatever is appropriate to the API.

These guidelines also apply to middleware that adds information such as parsed cookies, form variables, sessions, and the like to environ. Specifically, such middleware should provide these features as functions which operate on environ, rather than simply stuffing values into environ. This helps ensure that information is calculated from environ after any middleware has done any URL rewrites or other environ modifications.

It is very important that these "safe extension" rules be followed by both server and middleware developers, in order to avoid a future in which middleware developers are forced to delete any and all extension APIs from environ to ensure that their mediation isn't being bypassed by applications using those extensions!


h2. Middleware API

bq. *Status:* Draft.<br>*Note:* Needs elaboration.

Middleware callables play the role of a server with respect to the application they wrap, while also acting as an application with respect to the server they are called by. Middleware components can perform such functions as:

* Routing a request to different application objects based on the target URL, after rewriting the environ accordingly.
* Allowing multiple applications to run side-by-side in the same process.
* Load balancing and remote processing, by forwarding requests and responses over a network.

The presence of middleware in general is transparent to both the server and the application sides of the interface, and should require no special support. A user who desires to incorporate middleware into an application simply provides the middleware component to the server, as if it were an application, and configures the middleware component to invoke the application, as if the middleware component were a server. Of course, the "application" that the middleware wraps may in fact be another middleware component wrapping another application, and so on, creating what is referred to as a "middleware stack".


h2. Filter API

bq. *Status:* Draft.<br>*Note:* Needs elaboration.

A large amount of middleware only applies changes to the environment coming in from the server before reaching the application, or, conversely, only applies transformations to the data returned by the application. Additionally, middleware, by wrapping applications and other middleware in a recursive structure, is less efficient and harder to debug than a "flat" model. Filters fill the need for efficient ingress- or egress-only modifications.

Such "filters" can perform such functions as:

* Perform additional processing on the incoming request, such as transforming HTTP GET arguments.
* Perform content post-processing, such as applying XSL stylesheets or GZip compression.

The filtering API may be implemented by WSGI2 servers, and filtering functionality can be added to non-supporting servers by utilizing a middleware layer which implements the filtering API.


h2. Asynchronous Processing

bq. *Status:* TBD.<br>*Note:* See the @futures@ PEP.



h1. Implementation Details

bq. *Status:* TBD.


h2. The WSGI Environment

bq. *Status:* Draft.

# All keys in the environment dictionary must be native strings.
# The value matching the @'wsgi.url_scheme'@ key must be a native string.
# For implementations where the native string is unicode, all CGI keys, and all CGI values other than @REQUEST_URI@, @SCRIPT_NAME@, @PATH_INFO@, and @QUERY_STRING@, must be encoded using ISO-8859-1.
# The value for the @REQUEST_URI@ key must be a byte string.
# The values for the @SCRIPT_NAME@, @PATH_INFO@, and @QUERY_STRING@ keys must be unicode strings. The encoding used must be stored in @wsgi.uri_encoding@ and default to UTF-8. The application developer may provide a different default. If conversion failed, ISO-8859-1 must be used.
# The value for the @wsgi.uri_encoding@ key must be a native string.
# The value matching the @wsgi.input@ key must produce byte strings.
# The @read()@ and @readline()@ methods of @wsgi.input@ may optionally take a size hint. If no hint is given @read()@ reads until end of stream.
# Read operations across @wsgi.input@ must return an empty string as an end of stream marker.


h2. Input Stream

bq. *Status:* TBD.

The input stream (@wsgi.input@) provided by the server must support the following methods:

|_. Method|_. Notes|
|@read(size)@|1, 4|
|@readline([size])@|1, 2, 4|
|@readlines([size])@|1, 3, 4|
|@__iter__()@|4|

The semantics of each method are as documented in the Python Library Reference, except for these notes as listed in the table above:

# The server is not required to read past the client's specified Content-Length, and is allowed to simulate an end-of-file condition if the application attempts to read past that point. The application should not attempt to read more data than is specified by the CONTENT_LENGTH variable.
# The implementation must support the optional size argument to readline().
# The application is free to not supply a size argument to readlines(), and the server or gateway is free to ignore the value of any supplied size argument.
# The read, readline and __iter__ methods must return a bytes instance. The readlines method must return a sequence which contains instances of bytes.

The methods listed in the table above must be supported by all servers conforming to this specification. Applications conforming to this specification must not use any other methods or attributes of the input object. In particular, applications must not attempt to close this stream, even if it possesses a close() method.

The input stream should silently ignore attempts to read more than the content length of the request. If no content length is specified the stream must be a dummy stream that does not return anything.


h2. Error Stream

bq. *Status:* TBD.

The error stream (@wsgi.errors@) provided by the server must support the following methods:

|_. Method|_. Notes|
|@flush()@|1|
|@write(str)@|2|
|@writelines(seq)@|2|

The semantics of each method are as documented in the Python Library Reference, except for these notes as listed in the table above:

# Since the errors stream may not be rewound, servers and gateways are free to forward write operations immediately, without buffering. In this case, the flush() method may be a no-op. Portable applications, however, cannot assume that output is unbuffered or that flush() is a no-op. They must call flush() if they need to ensure that output has in fact been written. (For example, to minimize intermingling of data from multiple processes writing to the same error log.)
# The write() method must accept a string argument, but needn't necessarily accept a bytes argument. The writelines() method must accept a sequence argument that consists entirely of strings, but needn't necessarily accept any bytes instance as a member of the sequence.

The methods listed in the table above must be supported by all servers conforming to this specification. Applications conforming to this specification must not use any other methods or attributes of the errors object. In particular, applications must not attempt to close this stream, even if it possesses a close() method.


h2. HTTP Features

bq. *Status:* Draft.<br>*Note:* The byte-range text should likely be removed and made entirely the domain of the application.

In general, servers should "play dumb" and allow the application complete control over its output. They should only make changes that do not alter the effective semantics of the application's response. It is always possible for the application developer to add middleware components to supply additional features, so server developers should be conservative in their implementation. In a sense, a server should consider itself to be like an HTTP "gateway server", with the application being an HTTP "origin server". (See RFC 2616, section 1.3, for the definition of these terms.)

However, because WSGI2 servers and applications do not communicate via HTTP, what RFC 2616 calls "hop-by-hop" headers do not apply to WSGI2 internal communications. WSGI2 applications must not generate any "hop-by-hop" headers [4], attempt to use HTTP features that would require them to generate such headers, or rely on the content of any incoming "hop-by-hop" headers in the environ dictionary. WSGI2 servers must handle any supported inbound "hop-by-hop" headers on their own, such as by decoding any inbound Transfer-Encoding, including chunked encoding if applicable.

Applying these principles to a variety of HTTP features, it should be clear that a server may handle cache validation via the @If-None-Match@ and @If-Modified-Since@ request headers and the @Last-Modified@ and @ETag@ response headers. However, it is not required to do this, and the application should perform its own cache validation if it wants to support that feature, since the server/gateway is not required to do such validation.

Similarly, a server may re-encode or transport-encode an application's response, but the application should use a suitable content encoding on its own and must not apply a transport encoding to its response body. A server may transmit byte ranges of the application's response if requested by the client and the application doesn't natively support byte ranges. Again, however, the application should perform this function on its own if desired.

Note that these restrictions on applications do not necessarily mean that every application must re-implement every HTTP feature; many HTTP features can be partially or fully implemented by middleware components, thus freeing both server and application authors from implementing the same features over and over again.


h3. HTTP 1.1

Servers that implement HTTP 1.1 must:

# Provide transparent support for HTTP 1.1 Expect/Continue. This can be accomplished in one of two ways:
## Respond to requests containing an @"Expect: 100-continue"@ request with an immediate @"100 Continue"@ response, and proceed normally.
## Proceed with the request normally, but provide the application with a @wsgi.input@ stream that will send the @"100 Continue"@ response if/when the application first attempts to read from the input stream. The read request must then remain blocked until the client responds.
# Provide transparent support for chunked transfer encoding of request bodies.
# Provide transparent support for chunked transfer encoding of response bodies if:
## The @Content-Length@ header is missing from the response, or;
## The @Transfer-Encoding@ response header is set to @"chunked"@, even if a @Content-Length@ header is provided.

Note that these behavior restrictions do not apply for HTTP 1.0 requests or for requests that are not directed to an application object. Not defining a @Content-Length@ for responses to HTTP 1.0 requests must still be treated as an error condition by the server, for example.

For more information on HTTP 1.1 Expect/Continue, see RFC 2616, sections 8.2.3 and 10.1.1. For more information on chunked transfer encoding, see RFC 2616, section 3.6.1.


h1. Python Cross-Version Compatibility

bq. *Status:* TBD.



h1. Examples

bq. *Status:* TBD.


h2. Functional Application Example

bq. *Status:* TBD.<br>*Note:* Demonstrate a function-based "hello world" WSGI application.

The following is a simple, function-based "hello world" example application, compatible with Python 2.x and 3.x.

<pre><code>def hello(environ):
    status = "200 OK"
    body = "Hello world!"
    
    headers = [
            ("Content-Type", "text/plain"),
            ("Content-Length", str(len(body)))
        ]
    
    return status, headers, [body]</code></pre>


h2. Class Instance Application Example

bq. *Status:* TBD.<br>*Note:* Demonstrate a class instance-based "hello world" WSGI application.

The following is a simple, class-based "hello world" example application, compatible with Python 2.x and 3.x.

<pre><code>class Hello(object):
    def __call__(self, environ):
        status = "200 OK"
        body = "Hello world!"
    
        headers = [
                ("Content-Type", "text/plain"),
                ("Content-Length", str(len(body)))
            ]
    
        return status, headers, [body]

hello = Hello()</code></pre>


h2. Middleware Example

bq. *Status:* TBD.<br>*Note:* Demonstrate simple (and robust) benchmarking middleware.


h2. Filtering Middleware Example

bq. *Status:* TBD.<br>*Note:* Demonstrate the filtering API as middleware.


h2. CGI Server Example

bq. *Status:* TBD.<br>*Note:* Demonstrate a basic CGI server that conforms to this standard.



h1. References

bq. *Status:* Draft.<br>*Note:* Needs more references, esp. to community discussion.

fn1. PEP 333: Python Web Services Gateway Interface v1.0 ("http://www.python.org/dev/peps/pep-0333/":http://www.python.org/dev/peps/pep-0333/)

fn2. PEP 3333: Python Web Services Gateway Interface v1.0.1 ("http://www.python.org/dev/peps/pep-3333/":http://www.python.org/dev/peps/pep-3333/)

fn3. RFC 2119: Key words for use in RFCs to Indicate Requirement Levels ("http://www.rfc-editor.org/rfc/rfc2119.txt":http://www.rfc-editor.org/rfc/rfc2119.txt)

fn4. "End-to-end and Hop-by-hop Headers" -- HTTP/1.1, Section 13.5.1 ("http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.5.1":http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html#sec13.5.1)


h1. Copyright

This document has been placed in the public domain.
